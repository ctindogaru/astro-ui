Index: features/nft/ntf-card/NFTCard.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/features/nft/ntf-card/NFTCard.tsx b/features/nft/ntf-card/NFTCard.tsx
--- a/features/nft/ntf-card/NFTCard.tsx	(revision b6fd707548bd8dee53e51e6b42d1fad9ff5d9ab0)
+++ b/features/nft/ntf-card/NFTCard.tsx	(date 1638466466262)
@@ -1,18 +1,22 @@
 import Image from 'next/image';
 import React, { useEffect, useRef, useState, VFC } from 'react';
 import styles from './ntf-card.module.scss';
+import axios from 'axios';
+import get from 'lodash/get';
 
 export interface NFTCardProps {
   name: string;
   image: StaticImageData;
   description?: string;
   isExternalImage?: boolean;
+  isExternalReference?: boolean;
 }
 
 export const NFTCard: VFC<NFTCardProps> = ({
   name,
   image,
   isExternalImage,
+  isExternalReference,
 }) => {
   const imgRef = useRef<HTMLImageElement>(null);
   const [showPlaceholder, setShowPlaceholder] = useState(true);
@@ -21,15 +25,43 @@
   // We add src property to image element here because of Chrome/Safari bug
   // when onLoad callback is not triggered is it is attached to element before src
   useEffect(() => {
+    const { CancelToken } = axios;
+    const source = CancelToken.source();
+
     if (isExternalImage && imgRef?.current) {
       imgRef.current.src = image.src;
+    } else if (isExternalReference) {
+      axios
+        .get(image.src, { cancelToken: source.token })
+        .then(({ data }) => {
+          const media = data?.media;
+
+          console.log(media);
+
+          if (media?.indexOf('http') === 0 && imgRef?.current) {
+            imgRef.current.src = image.src + '?no-cache=1';
+          } else {
+            setShowError(true);
+          }
+        })
+        .catch(thrown => {
+          setShowError(true);
+
+          if (axios.isCancel(thrown)) {
+            // do nothing - we cancel request on unmount
+          }
+        });
     }
-  }, [image.src, isExternalImage]);
+
+    return () => {
+      source.cancel('Cancelled on unmount');
+    };
+  }, [image.src, isExternalImage, isExternalReference]);
 
   return (
     <div className={styles.root}>
       <div>
-        {isExternalImage ? (
+        {isExternalImage || isExternalReference ? (
           // eslint-disable-next-line @next/next/no-img-element
           <img
             ref={imgRef}
Index: services/sputnik/SputnikHttpService/SputnikHttpService.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/sputnik/SputnikHttpService/SputnikHttpService.ts b/services/sputnik/SputnikHttpService/SputnikHttpService.ts
--- a/services/sputnik/SputnikHttpService/SputnikHttpService.ts	(revision b6fd707548bd8dee53e51e6b42d1fad9ff5d9ab0)
+++ b/services/sputnik/SputnikHttpService/SputnikHttpService.ts	(date 1638464791771)
@@ -817,10 +817,18 @@
 
   public async getAccountNFTs(accountId: string): Promise<NftToken[]> {
     const { data } = await this.httpService.get<NftTokenResponse[]>(
-      `/tokens/nfts/account-nfts/${accountId}`
+      `/tokens/nfts`,
+      {
+        params: {
+          filter: `ownerId||$eq||${accountId}`,
+          sort: 'createdAt,DESC',
+          offset: 0,
+          limit: 1000,
+        },
+      }
     );
 
-    return mapNftTokenResponseToNftToken(data);
+    return mapNftTokenResponseToNftToken(data.data);
   }
 
   public async getAllTokens(): Promise<Token[]> {
Index: services/sputnik/mappers/nfts.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/sputnik/mappers/nfts.ts b/services/sputnik/mappers/nfts.ts
--- a/services/sputnik/mappers/nfts.ts	(revision b6fd707548bd8dee53e51e6b42d1fad9ff5d9ab0)
+++ b/services/sputnik/mappers/nfts.ts	(date 1638465816031)
@@ -5,27 +5,40 @@
 ): NftToken[] {
   return data
     .reduce<NftToken[]>((res, item) => {
-      const { id, baseUri, metadata } = item;
+      const { id, baseUri, metadata, contract } = item;
+
+      if (!metadata) return res;
+
+      const { media, reference } = metadata;
+
+      const isMediaContainsUrl = media?.indexOf('http') === 0;
 
       let uri;
       let isExternalImage = false;
+      let isExternalReference = false;
 
-      if (baseUri) {
-        uri = `${baseUri}/${metadata.media}`;
-      } else if (metadata.media.indexOf('http') === 0) {
-        uri = metadata.media;
+      if (baseUri && media && !isMediaContainsUrl) {
+        uri = `${baseUri}/${media}`;
+      } else if (isMediaContainsUrl) {
+        uri = media;
         isExternalImage = true;
-      } else {
-        uri = `https://cloudflare-ipfs.com/ipfs/${metadata.media}`;
+      } else if (contract.baseUri && !media && reference) {
+        uri = `${contract.baseUri}/${reference}`;
+        isExternalReference = true;
+      } else if (media) {
+        uri = `https://cloudflare-ipfs.com/ipfs/${media}`;
       }
 
-      res.push({
-        id,
-        uri,
-        description: metadata.description ?? null,
-        title: metadata.title ?? null,
-        isExternalImage,
-      });
+      if (uri) {
+        res.push({
+          id,
+          uri,
+          description: metadata.description ?? null,
+          title: metadata.title ?? null,
+          isExternalImage,
+          isExternalReference,
+        });
+      }
 
       return res;
     }, [])
Index: pages/dao/[dao]/treasury/nfts/NFTs.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/dao/[dao]/treasury/nfts/NFTs.tsx b/pages/dao/[dao]/treasury/nfts/NFTs.tsx
--- a/pages/dao/[dao]/treasury/nfts/NFTs.tsx	(revision b6fd707548bd8dee53e51e6b42d1fad9ff5d9ab0)
+++ b/pages/dao/[dao]/treasury/nfts/NFTs.tsx	(date 1638465132240)
@@ -81,6 +81,7 @@
                     height: 424,
                   }}
                   isExternalImage={nft.isExternalImage}
+                  isExternalReference={nft.isExternalReference}
                 />
               </div>
             ))}
Index: types/token.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/types/token.ts b/types/token.ts
--- a/types/token.ts	(revision b6fd707548bd8dee53e51e6b42d1fad9ff5d9ab0)
+++ b/types/token.ts	(date 1638465132243)
@@ -44,6 +44,7 @@
   description: string;
   title: string;
   isExternalImage: boolean;
+  isExternalReference: boolean;
 };
 
 export type TokenResponse = {
